swagger: '2.0'
info:
  version: '0.1.0'
  title: Gamification API
  description: An API to use a gamification system
host: localhost:8080
basePath: /api
schemes:
- http
- https
paths:
  /badges:
    post:
      description: create a badge for my application
      operationId: createBadge
      consumes:
      - application/json
      parameters:
      - name: badge
        in: body
        required: true
        schema:
          $ref: '#/definitions/Badge'
      responses:
        '201':
          description: Badge created
          schema:
            type: object
    get:
      description: get the list of all badges of my application
      operationId: getBadges
      produces:
      - application/json
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/Badge'
    delete:
      description: delete all badges of my application
      operationId: deleteBadges
      produces:
      - application/json
      responses:
        '204':
          description: All badges successfully deleted
          schema:
            type: object
  /badges/{badgeId}:
    get:
      description: get a specific badge of my application
      operationId: getBadge
      produces:
      - application/json
      parameters:
      - name: badgeId
        in: path
        description: ID of the requested badge
        required: true
        type: integer
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/Badge'
    put:
      description: edit a specific badge of my application
      operationId: editBadge
      produces:
      - application/json
      parameters:
      - name: badge
        in: body
        description: badge with his new content
        required: true
        schema:
          $ref: '#/definitions/Badge'
      - name: badgeId
        in: path
        description: ID of the requested badge
        required: true
        type: integer
      responses:
        '200':
          description: Badge successfully updated
          schema:
            type: object
    delete:
      description: delete a specific badge of my application
      operationId: deleteBadge
      produces:
      - application/json
      parameters:
      - name: badgeId
        in: path
        description: ID of the requested badge
        required: true
        type: integer
      responses:
        '204':
          description: Badge successfully deleted
          schema:
            type: object

  /pointScales:
    post:
      description: create a point-scale for my application
      operationId: createPointScale
      consumes:
      - application/json
      parameters:
      - name: pointscale
        in: body
        required: true
        schema:
          $ref: '#/definitions/PointScale'
      responses:
        '201':
          description: created
          schema:
            type: object
    get:
      description: get the list of all point-scale of my application
      operationId: getPointScales
      produces:
      - application/json
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/PointScale'
  /rules:
    post:
      description: create a rule for my application
      operationId: createRule
      consumes:
      - application/json
      parameters:
      - name: rule
        in: body
        required: true
        schema:
          $ref: '#/definitions/Rule'
      responses:
        '201':
          description: created
          schema:
            type: object
    get:
      description: get the list of all point-scale of my application
      operationId: getRules
      produces:
      - application/json
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/Rule'
  /events:
    post:
      description: create an event for my application
      operationId: createEvent
      consumes:
      - application/json
      parameters:
      - name: event
        in: body
        required: true
        schema:
          $ref: '#/definitions/Event'
      responses:
        '201':
          description: created
          schema:
            type: object
    get:
      description: get the list of all events of my application
      operationId: getEvents
      produces:
      - application/json
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'


definitions:
  Badge:
    type: object
    properties:
      badgeId:
        type: integer
      badgeName:
        type: string
  PointScale:
    type: object
    properties:
      pointScaleName:
        type: string
      counter:
        type: integer
  Rule:
    type: object
    properties:
      ruleName:
        type: string
      badgeId:
        type: integer
      pointScale:
        type: string
      eventTrigger:
        type: string
  Event:
    type: object
    properties:
      eventType:
        type: string
      userId:
        type: integer
      eventProperties:
        type: array
        items:
          type: string
